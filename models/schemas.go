package models

import (
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
)

var (
	// data
	SchemaAS        map[string]*schema.Schema
	SchemaDomain    map[string]*schema.Schema
	SchemaGroup     map[string]*schema.Schema
	SchemaStandType map[string]*schema.Schema

	// resource
	SchemaProject    map[string]*schema.Schema
	SchemaVM         map[string]*schema.Schema
	SchemaSowa       map[string]*schema.Schema
	SchemaNginx      map[string]*schema.Schema
	SchemaPostgres   map[string]*schema.Schema
	SchemaPostgresSE map[string]*schema.Schema
	SchemaOpenshift  map[string]*schema.Schema
	SchemaELK        map[string]*schema.Schema

	SchemaTag map[string]*schema.Schema

	SchemaKafka   map[string]*schema.Schema
	SchemaIgnite  map[string]*schema.Schema
	SchemaPatroni map[string]*schema.Schema
)

func init() {

	SchemaAS = map[string]*schema.Schema{
		"id":           {Type: schema.TypeString, Computed: true},
		"name":         {Type: schema.TypeString, Computed: true},
		"code":         {Type: schema.TypeString, Required: true},
		"status":       {Type: schema.TypeString, Computed: true},
		"service_type": {Type: schema.TypeString, Computed: true},
		"domain_id":    {Type: schema.TypeString, Required: true},
	}

	SchemaDomain = map[string]*schema.Schema{
		"id":   {Type: schema.TypeString, Computed: true},
		"name": {Type: schema.TypeString, Required: true},
		// "portal_id":       {Type: schema.TypeString, Computed: true},
		// "sap_id":          {Type: schema.TypeString, Computed: true},
		// "buisiness_block": {Type: schema.TypeString, Computed: true},
		// "type":            {Type: schema.TypeString, Computed: true},
	}

	SchemaGroup = map[string]*schema.Schema{
		// "id":   {Type: schema.TypeString, Required: true},
		"name": {Type: schema.TypeString, Required: true},
		// "portal_id":   {Type: schema.TypeInt, Computed: true},
		"domain_id": {Type: schema.TypeString, Required: true},
		// "domain_name": {Type: schema.TypeString, Computed: true},
		// "limit":   {Type: schema.TypeFloat, Computed: true},
		"is_prom": {Type: schema.TypeBool, Computed: true},
		// "is_deleted":  {Type: schema.TypeBool, Computed: true},
	}

	SchemaStandType = map[string]*schema.Schema{
		"id": {Type: schema.TypeString, Computed: true},
		// "group_id":        {Type: schema.TypeString, Required: true},
		"name":            {Type: schema.TypeString, Required: true},
		"name_short":      {Type: schema.TypeString, Computed: true},
		"hpsm_stand_type": {Type: schema.TypeString, Computed: true},
		"code":            {Type: schema.TypeString, Computed: true},
		"is_disabled":     {Type: schema.TypeBool, Computed: true},
	}

	SchemaProject = map[string]*schema.Schema{
		"group_id":       {Type: schema.TypeString, Required: true},
		"stand_type_id":  {Type: schema.TypeString, Required: true},
		"domain_id":      {Type: schema.TypeString, Computed: true},
		"app_systems_ci": {Type: schema.TypeString, Required: true},
		"name":           {Type: schema.TypeString, Required: true},
		"stand_type":     {Type: schema.TypeString, Computed: true},
		"state":          {Type: schema.TypeString, Computed: true},
		"type":           {Type: schema.TypeString, Computed: true},
	}

	SchemaVM = map[string]*schema.Schema{
		"name":            {Type: schema.TypeString, Computed: true},
		"service_name":    {Type: schema.TypeString, Required: true},
		"group_id":        {Type: schema.TypeString, Required: true},
		"project_id":      {Type: schema.TypeString, Required: true},
		"cluster_uuid":    {Type: schema.TypeString, Computed: true},
		"ir_group":        {Type: schema.TypeString, Required: true},
		"ir_type":         {Type: schema.TypeString, Computed: true},
		"cpu":             {Type: schema.TypeInt, Computed: true},
		"ram":             {Type: schema.TypeInt, Computed: true},
		"disk":            {Type: schema.TypeInt, Required: true},
		"flavor":          {Type: schema.TypeString, Required: true},
		"region":          {Type: schema.TypeString, Optional: true},
		"virtualization":  {Type: schema.TypeString, Required: true},
		"os_name":         {Type: schema.TypeString, Required: true},
		"os_version":      {Type: schema.TypeString, Required: true},
		"fault_tolerance": {Type: schema.TypeString, Required: true},
		"state":           {Type: schema.TypeString, Computed: true},
		"state_resize":    {Type: schema.TypeString, Computed: true},
		"zone":            {Type: schema.TypeString, Required: true},
		"ip":              {Type: schema.TypeString, Computed: true},
		"dns":             {Type: schema.TypeString, Computed: true},
		"dns_name":        {Type: schema.TypeString, Computed: true},
		"step":            {Type: schema.TypeString, Computed: true},
		"public_ssh_name": {Type: schema.TypeString, Optional: true},
		"group":           {Type: schema.TypeString, Optional: true},
		"user":            {Type: schema.TypeString, Computed: true},
		"password":        {Type: schema.TypeString, Computed: true},
		"app_params": {
			Type:     schema.TypeMap,
			Optional: true,
			Elem:     &schema.Schema{Type: schema.TypeString, Required: true},
		},
		"volume": {
			Type:     schema.TypeSet,
			Optional: true,
			// Computed: true,
			Elem: &schema.Resource{
				Schema: map[string]*schema.Schema{
					"path":         {Type: schema.TypeString, Optional: true},
					"size":         {Type: schema.TypeInt, Required: true},
					"storage_type": {Type: schema.TypeString, Optional: true},
				},
			},
		},
		"tag_ids": {Type: schema.TypeSet, Optional: true, Elem: &schema.Schema{Type: schema.TypeString}},
	}

	SchemaSowa = map[string]*schema.Schema{
		"name":            {Type: schema.TypeString, Computed: true},
		"service_name":    {Type: schema.TypeString, Required: true},
		"group_id":        {Type: schema.TypeString, Required: true},
		"project_id":      {Type: schema.TypeString, Required: true},
		"cluster_uuid":    {Type: schema.TypeString, Computed: true},
		"ir_group":        {Type: schema.TypeString, Required: true},
		"ir_type":         {Type: schema.TypeString, Computed: true},
		"cpu":             {Type: schema.TypeInt, Computed: true},
		"ram":             {Type: schema.TypeInt, Computed: true},
		"disk":            {Type: schema.TypeInt, Required: true},
		"flavor":          {Type: schema.TypeString, Required: true},
		"region":          {Type: schema.TypeString, Required: true},
		"virtualization":  {Type: schema.TypeString, Required: true},
		"os_name":         {Type: schema.TypeString, Required: true},
		"os_version":      {Type: schema.TypeString, Required: true},
		"fault_tolerance": {Type: schema.TypeString, Required: true},
		"state":           {Type: schema.TypeString, Computed: true},
		"state_resize":    {Type: schema.TypeString, Computed: true},
		"zone":            {Type: schema.TypeString, Required: true},
		"ip":              {Type: schema.TypeString, Computed: true},
		"dns":             {Type: schema.TypeString, Computed: true},
		"dns_name":        {Type: schema.TypeString, Computed: true},
		"step":            {Type: schema.TypeString, Computed: true},
		"public_ssh_name": {Type: schema.TypeString, Optional: true},
		"user":            {Type: schema.TypeString, Computed: true},
		"group":           {Type: schema.TypeString, Optional: true},
		"app_params": {
			Type:     schema.TypeMap,
			Required: true,
			Elem:     &schema.Schema{Type: schema.TypeString, Required: true},
		},
		"volume": {
			Type:     schema.TypeSet,
			Optional: true,
			// Computed: true,
			Elem: &schema.Resource{
				Schema: map[string]*schema.Schema{
					"path": {Type: schema.TypeString, Optional: true},
					"size": {Type: schema.TypeInt, Required: true},
				},
			},
		},
		"tag_ids": {Type: schema.TypeSet, Optional: true, Elem: &schema.Schema{Type: schema.TypeString}},
	}

	SchemaNginx = map[string]*schema.Schema{
		"name":            {Type: schema.TypeString, Computed: true},
		"service_name":    {Type: schema.TypeString, Required: true},
		"group_id":        {Type: schema.TypeString, Required: true},
		"project_id":      {Type: schema.TypeString, Required: true},
		"cluster_uuid":    {Type: schema.TypeString, Computed: true},
		"ir_group":        {Type: schema.TypeString, Required: true},
		"ir_type":         {Type: schema.TypeString, Computed: true},
		"cpu":             {Type: schema.TypeInt, Computed: true},
		"ram":             {Type: schema.TypeInt, Computed: true},
		"disk":            {Type: schema.TypeInt, Required: true},
		"flavor":          {Type: schema.TypeString, Required: true},
		"region":          {Type: schema.TypeString, Required: true},
		"virtualization":  {Type: schema.TypeString, Required: true},
		"os_name":         {Type: schema.TypeString, Required: true},
		"os_version":      {Type: schema.TypeString, Required: true},
		"fault_tolerance": {Type: schema.TypeString, Required: true},
		"state":           {Type: schema.TypeString, Computed: true},
		"state_resize":    {Type: schema.TypeString, Computed: true},
		"zone":            {Type: schema.TypeString, Required: true},
		"ip":              {Type: schema.TypeString, Computed: true},
		"dns":             {Type: schema.TypeString, Computed: true},
		"dns_name":        {Type: schema.TypeString, Computed: true},
		"step":            {Type: schema.TypeString, Computed: true},
		"public_ssh_name": {Type: schema.TypeString, Optional: true},
		"user":            {Type: schema.TypeString, Computed: true},
		"group":           {Type: schema.TypeString, Optional: true},
		"app_params": {
			Type:     schema.TypeMap,
			Required: true,
			Elem:     &schema.Schema{Type: schema.TypeString, Required: true},
		},
		"volume": {
			Type:     schema.TypeSet,
			Optional: true,
			// Computed: true,
			Elem: &schema.Resource{
				Schema: map[string]*schema.Schema{
					// "tosca_request_id": {Type: schema.TypeString, Computed: true},
					"volume_id": {Type: schema.TypeString, Computed: true},
					"path":      {Type: schema.TypeString, Optional: true},
					"size":      {Type: schema.TypeInt, Required: true},
					// "status":           {Type: schema.TypeString, Computed: true},
					// "name":             {Type: schema.TypeString, Optional: true},
					// "fs_type":          {Type: schema.TypeString, Optional: true},
					// "storage_type":     {Type: schema.TypeString, Optional: true},
				},
			},
		},
		"tag_ids": {Type: schema.TypeSet, Optional: true, Elem: &schema.Schema{Type: schema.TypeString}},
	}

	SchemaPostgres = map[string]*schema.Schema{
		"name":            {Type: schema.TypeString, Computed: true},
		"service_name":    {Type: schema.TypeString, Required: true},
		"group_id":        {Type: schema.TypeString, Required: true},
		"project_id":      {Type: schema.TypeString, Required: true},
		"cluster_uuid":    {Type: schema.TypeString, Computed: true},
		"ir_group":        {Type: schema.TypeString, Required: true},
		"ir_type":         {Type: schema.TypeString, Computed: true},
		"cpu":             {Type: schema.TypeInt, Computed: true},
		"ram":             {Type: schema.TypeInt, Computed: true},
		"disk":            {Type: schema.TypeInt, Required: true},
		"flavor":          {Type: schema.TypeString, Required: true},
		"region":          {Type: schema.TypeString, Required: true},
		"virtualization":  {Type: schema.TypeString, Required: true},
		"os_name":         {Type: schema.TypeString, Required: true},
		"os_version":      {Type: schema.TypeString, Required: true},
		"fault_tolerance": {Type: schema.TypeString, Required: true},
		"state":           {Type: schema.TypeString, Computed: true},
		"state_resize":    {Type: schema.TypeString, Computed: true},
		"zone":            {Type: schema.TypeString, Required: true},
		"ip":              {Type: schema.TypeString, Computed: true},
		"dns":             {Type: schema.TypeString, Computed: true},
		"dns_name":        {Type: schema.TypeString, Computed: true},
		"step":            {Type: schema.TypeString, Computed: true},
		"public_ssh_name": {Type: schema.TypeString, Optional: true},
		"user":            {Type: schema.TypeString, Computed: true},
		"group":           {Type: schema.TypeString, Optional: true},
		"app_params": {
			Type:     schema.TypeMap,
			Required: true,
			Elem:     &schema.Schema{Type: schema.TypeString, Required: true},
		},
		"volume": {
			// Type:     schema.TypeList,
			Type:     schema.TypeSet,
			Optional: true,
			// Computed: true,
			Elem: &schema.Resource{
				Schema: map[string]*schema.Schema{
					// "tosca_request_id": {Type: schema.TypeString, Computed: true},
					"path": {Type: schema.TypeString, Optional: true},
					"size": {Type: schema.TypeInt, Required: true},
					// "status": {Type: schema.TypeString, Computed: true},
					// "name":             {Type: schema.TypeString, Optional: true},
					// "fs_type":          {Type: schema.TypeString, Optional: true},
					// "storage_type":     {Type: schema.TypeString, Optional: true},
				},
			},
		},
		"tag_ids": {Type: schema.TypeSet, Optional: true, Elem: &schema.Schema{Type: schema.TypeString}},
	}

	SchemaPostgresSE = map[string]*schema.Schema{
		"name":            {Type: schema.TypeString, Computed: true},
		"service_name":    {Type: schema.TypeString, Required: true},
		"group_id":        {Type: schema.TypeString, Required: true},
		"project_id":      {Type: schema.TypeString, Required: true},
		"cluster_uuid":    {Type: schema.TypeString, Computed: true},
		"ir_group":        {Type: schema.TypeString, Required: true},
		"ir_type":         {Type: schema.TypeString, Computed: true},
		"cpu":             {Type: schema.TypeInt, Computed: true},
		"ram":             {Type: schema.TypeInt, Computed: true},
		"disk":            {Type: schema.TypeInt, Required: true},
		"flavor":          {Type: schema.TypeString, Required: true},
		"region":          {Type: schema.TypeString, Required: true},
		"virtualization":  {Type: schema.TypeString, Required: true},
		"os_name":         {Type: schema.TypeString, Required: true},
		"os_version":      {Type: schema.TypeString, Required: true},
		"fault_tolerance": {Type: schema.TypeString, Required: true},
		"state":           {Type: schema.TypeString, Computed: true},
		"state_resize":    {Type: schema.TypeString, Computed: true},
		"zone":            {Type: schema.TypeString, Required: true},
		"ip":              {Type: schema.TypeString, Computed: true},
		"dns":             {Type: schema.TypeString, Computed: true},
		"dns_name":        {Type: schema.TypeString, Computed: true},
		"step":            {Type: schema.TypeString, Computed: true},
		"public_ssh_name": {Type: schema.TypeString, Optional: true},
		"user":            {Type: schema.TypeString, Computed: true},
		"group":           {Type: schema.TypeString, Optional: true},
		"app_params": {
			Type:     schema.TypeMap,
			Required: true,
			Elem:     &schema.Schema{Type: schema.TypeString, Required: true},
		},
		"volume": {
			Type:     schema.TypeSet,
			Optional: true,
			// Computed: true,
			Elem: &schema.Resource{
				Schema: map[string]*schema.Schema{
					"path": {Type: schema.TypeString, Optional: true},
					"size": {Type: schema.TypeInt, Required: true},
				},
			},
		},
		"tag_ids": {Type: schema.TypeSet, Optional: true, Elem: &schema.Schema{Type: schema.TypeString}},
	}

	SchemaOpenshift = map[string]*schema.Schema{
		"name":         {Type: schema.TypeString, Computed: true},
		"service_name": {Type: schema.TypeString, Required: true},
		"group_id":     {Type: schema.TypeString, Required: true},
		"project_id":   {Type: schema.TypeString, Required: true},
		"cluster_uuid": {Type: schema.TypeString, Computed: true},
		"ir_group":     {Type: schema.TypeString, Required: true},
		"ir_type":      {Type: schema.TypeString, Computed: true},
		"cpu":          {Type: schema.TypeInt, Required: true},
		"ram":          {Type: schema.TypeInt, Required: true},
		// "disk":         {Type: schema.TypeInt, Required: true},
		// "flavor":          {Type: schema.TypeString, Computed: true},
		"region":         {Type: schema.TypeString, Required: true},
		"virtualization": {Type: schema.TypeString, Required: true},
		"os_name":        {Type: schema.TypeString, Required: true},
		// "os_version":      {Type: schema.TypeString, Required: true},
		"fault_tolerance": {Type: schema.TypeString, Required: true},
		"state":           {Type: schema.TypeString, Computed: true},
		"state_resize":    {Type: schema.TypeString, Computed: true},
		"zone":            {Type: schema.TypeString, Required: true},
		"ip":              {Type: schema.TypeString, Computed: true},
		"dns":             {Type: schema.TypeString, Computed: true},
		"dns_name":        {Type: schema.TypeString, Computed: true},
		"step":            {Type: schema.TypeString, Computed: true},
		"public_ssh_name": {Type: schema.TypeString, Optional: true},
		"user":            {Type: schema.TypeString, Computed: true},
		"group":           {Type: schema.TypeString, Optional: true},
		"app_params": {
			Type:     schema.TypeMap,
			Required: true,
			Elem:     &schema.Schema{Type: schema.TypeString, Required: true},
		},
		"tag_ids": {Type: schema.TypeSet, Optional: true, Elem: &schema.Schema{Type: schema.TypeString}},
	}

	SchemaKafka = map[string]*schema.Schema{
		"name":            {Type: schema.TypeString, Computed: true},
		"service_name":    {Type: schema.TypeString, Required: true},
		"group_id":        {Type: schema.TypeString, Required: true},
		"project_id":      {Type: schema.TypeString, Required: true},
		"ir_group":        {Type: schema.TypeString, Required: true},
		"type":            {Type: schema.TypeString, Computed: true},
		"cpu":             {Type: schema.TypeInt, Computed: true},
		"ram":             {Type: schema.TypeInt, Computed: true},
		"disk":            {Type: schema.TypeInt, Required: true},
		"flavor":          {Type: schema.TypeString, Required: true},
		"region":          {Type: schema.TypeString, Required: true},
		"virtualization":  {Type: schema.TypeString, Required: true},
		"os_name":         {Type: schema.TypeString, Required: true},
		"os_version":      {Type: schema.TypeString, Required: true},
		"fault_tolerance": {Type: schema.TypeString, Required: true},
		"state":           {Type: schema.TypeString, Computed: true},
		"state_resize":    {Type: schema.TypeString, Computed: true},
		"zone":            {Type: schema.TypeString, Required: true},
		"step":            {Type: schema.TypeString, Computed: true},
		"public_ssh_name": {Type: schema.TypeString, Optional: true},
		"group":           {Type: schema.TypeString, Optional: true},
		"app_params": {
			Type:     schema.TypeMap,
			Required: true,
			Elem:     &schema.Schema{Type: schema.TypeString, Required: true},
		},
		"servers": {
			Type:     schema.TypeList,
			Computed: true,
			Elem: &schema.Resource{
				Schema: map[string]*schema.Schema{
					"id":              {Type: schema.TypeString, Computed: true},
					"name":            {Type: schema.TypeString, Computed: true},
					"service_name":    {Type: schema.TypeString, Required: true},
					"group_id":        {Type: schema.TypeString, Required: true},
					"project_id":      {Type: schema.TypeString, Required: true},
					"cluster_uuid":    {Type: schema.TypeString, Computed: true},
					"ir_group":        {Type: schema.TypeString, Required: true},
					"ir_type":         {Type: schema.TypeString, Computed: true},
					"cpu":             {Type: schema.TypeInt, Required: true},
					"ram":             {Type: schema.TypeInt, Required: true},
					"disk":            {Type: schema.TypeInt, Required: true},
					"flavor":          {Type: schema.TypeString, Computed: true},
					"region":          {Type: schema.TypeString, Required: true},
					"virtualization":  {Type: schema.TypeString, Required: true},
					"os_name":         {Type: schema.TypeString, Required: true},
					"os_version":      {Type: schema.TypeString, Required: true},
					"fault_tolerance": {Type: schema.TypeString, Required: true},
					"state":           {Type: schema.TypeString, Computed: true},
					"state_resize":    {Type: schema.TypeString, Computed: true},
					"zone":            {Type: schema.TypeString, Required: true},
					"ip":              {Type: schema.TypeString, Computed: true},
					"dns":             {Type: schema.TypeString, Computed: true},
					"dns_name":        {Type: schema.TypeString, Computed: true},
					"step":            {Type: schema.TypeString, Computed: true},
					"user":            {Type: schema.TypeString, Computed: true},
					"public_ssh_name": {Type: schema.TypeString, Optional: true},
					"public_ssh":      {Type: schema.TypeString, Optional: true},
				},
			},
		},
		"volume": {
			Type:     schema.TypeList,
			Optional: true,
			// Computed: true,
			Elem: &schema.Resource{
				Schema: map[string]*schema.Schema{
					"tosca_request_id": {Type: schema.TypeString, Computed: true},
					"path":             {Type: schema.TypeString, Optional: true},
					"size":             {Type: schema.TypeInt, Required: true},
					"status":           {Type: schema.TypeString, Computed: true},
					"name":             {Type: schema.TypeString, Optional: true},
					"fs_type":          {Type: schema.TypeString, Optional: true},
					"storage_type":     {Type: schema.TypeString, Optional: true},
				},
			},
		},
		"tag_ids": {Type: schema.TypeSet, Optional: true, Elem: &schema.Schema{Type: schema.TypeString}},
	}

	SchemaIgnite = map[string]*schema.Schema{
		"name":            {Type: schema.TypeString, Computed: true},
		"service_name":    {Type: schema.TypeString, Required: true},
		"group_id":        {Type: schema.TypeString, Required: true},
		"project_id":      {Type: schema.TypeString, Required: true},
		"cluster_uuid":    {Type: schema.TypeString, Computed: true},
		"ir_group":        {Type: schema.TypeString, Required: true},
		"ir_type":         {Type: schema.TypeString, Computed: true},
		"cpu":             {Type: schema.TypeInt, Computed: true},
		"ram":             {Type: schema.TypeInt, Computed: true},
		"disk":            {Type: schema.TypeInt, Required: true},
		"flavor":          {Type: schema.TypeString, Required: true},
		"region":          {Type: schema.TypeString, Required: true},
		"virtualization":  {Type: schema.TypeString, Required: true},
		"os_name":         {Type: schema.TypeString, Required: true},
		"os_version":      {Type: schema.TypeString, Required: true},
		"fault_tolerance": {Type: schema.TypeString, Required: true},
		"state":           {Type: schema.TypeString, Computed: true},
		"state_resize":    {Type: schema.TypeString, Computed: true},
		"zone":            {Type: schema.TypeString, Required: true},
		"ip":              {Type: schema.TypeString, Computed: true},
		"dns":             {Type: schema.TypeString, Computed: true},
		"dns_name":        {Type: schema.TypeString, Computed: true},
		"step":            {Type: schema.TypeString, Computed: true},
		"public_ssh_name": {Type: schema.TypeString, Optional: true},
		"group":           {Type: schema.TypeString, Optional: true},
		"app_params": {
			Type:     schema.TypeMap,
			Required: true,
			Elem:     &schema.Schema{Type: schema.TypeString, Required: true},
		},
		"servers": {
			Type:     schema.TypeList,
			Computed: true,
			Elem: &schema.Resource{
				Schema: map[string]*schema.Schema{
					"id":              {Type: schema.TypeString, Computed: true},
					"name":            {Type: schema.TypeString, Computed: true},
					"service_name":    {Type: schema.TypeString, Required: true},
					"group_id":        {Type: schema.TypeString, Required: true},
					"project_id":      {Type: schema.TypeString, Required: true},
					"cluster_uuid":    {Type: schema.TypeString, Computed: true},
					"ir_group":        {Type: schema.TypeString, Required: true},
					"ir_type":         {Type: schema.TypeString, Computed: true},
					"cpu":             {Type: schema.TypeInt, Required: true},
					"ram":             {Type: schema.TypeInt, Required: true},
					"disk":            {Type: schema.TypeInt, Required: true},
					"flavor":          {Type: schema.TypeString, Computed: true},
					"region":          {Type: schema.TypeString, Required: true},
					"virtualization":  {Type: schema.TypeString, Required: true},
					"os_name":         {Type: schema.TypeString, Required: true},
					"os_version":      {Type: schema.TypeString, Required: true},
					"fault_tolerance": {Type: schema.TypeString, Required: true},
					"state":           {Type: schema.TypeString, Computed: true},
					"state_resize":    {Type: schema.TypeString, Computed: true},
					"zone":            {Type: schema.TypeString, Required: true},
					"ip":              {Type: schema.TypeString, Computed: true},
					"dns":             {Type: schema.TypeString, Computed: true},
					"dns_name":        {Type: schema.TypeString, Computed: true},
					"step":            {Type: schema.TypeString, Computed: true},
					"user":            {Type: schema.TypeString, Computed: true},
					"password":        {Type: schema.TypeString, Computed: true},
					"public_ssh_name": {Type: schema.TypeString, Optional: true},
					"public_ssh":      {Type: schema.TypeString, Optional: true},
				},
			},
		},
		"volume": {
			Type:     schema.TypeList,
			Optional: true,
			// Computed: true,
			Elem: &schema.Resource{
				Schema: map[string]*schema.Schema{
					"tosca_request_id": {Type: schema.TypeString, Computed: true},
					"path":             {Type: schema.TypeString, Optional: true},
					"size":             {Type: schema.TypeInt, Required: true},
					"status":           {Type: schema.TypeString, Computed: true},
					"name":             {Type: schema.TypeString, Optional: true},
					"fs_type":          {Type: schema.TypeString, Optional: true},
					"storage_type":     {Type: schema.TypeString, Optional: true},
				},
			},
		},
		"tag_ids": {Type: schema.TypeSet, Optional: true, Elem: &schema.Schema{Type: schema.TypeString}},
	}

	SchemaTag = map[string]*schema.Schema{
		"name": {Type: schema.TypeString, Required: true, ForceNew: true},
	}

	SchemaPatroni = map[string]*schema.Schema{
		"name":            {Type: schema.TypeString, Computed: true},
		"service_name":    {Type: schema.TypeString, Required: true},
		"group_id":        {Type: schema.TypeString, Required: true},
		"project_id":      {Type: schema.TypeString, Required: true},
		"ir_group":        {Type: schema.TypeString, Required: true},
		"type":            {Type: schema.TypeString, Computed: true},
		"cpu":             {Type: schema.TypeInt, Computed: true},
		"ram":             {Type: schema.TypeInt, Computed: true},
		"disk":            {Type: schema.TypeInt, Required: true},
		"flavor":          {Type: schema.TypeString, Required: true},
		"region":          {Type: schema.TypeString, Required: true},
		"virtualization":  {Type: schema.TypeString, Required: true},
		"os_name":         {Type: schema.TypeString, Required: true},
		"os_version":      {Type: schema.TypeString, Required: true},
		"fault_tolerance": {Type: schema.TypeString, Required: true},
		"state":           {Type: schema.TypeString, Computed: true},
		"state_resize":    {Type: schema.TypeString, Computed: true},
		"zone":            {Type: schema.TypeString, Required: true},
		"step":            {Type: schema.TypeString, Computed: true},
		"public_ssh_name": {Type: schema.TypeString, Optional: true},
		"group":           {Type: schema.TypeString, Optional: true},
		"app_params": {
			Type:     schema.TypeMap,
			Required: true,
			Elem:     &schema.Schema{Type: schema.TypeString, Required: true},
		},
		"servers": {
			Type:     schema.TypeList,
			Computed: true,
			Elem: &schema.Resource{
				Schema: map[string]*schema.Schema{
					"id":              {Type: schema.TypeString, Computed: true},
					"name":            {Type: schema.TypeString, Computed: true},
					"service_name":    {Type: schema.TypeString, Required: true},
					"group_id":        {Type: schema.TypeString, Required: true},
					"project_id":      {Type: schema.TypeString, Required: true},
					"cluster_uuid":    {Type: schema.TypeString, Computed: true},
					"ir_group":        {Type: schema.TypeString, Required: true},
					"ir_type":         {Type: schema.TypeString, Computed: true},
					"cpu":             {Type: schema.TypeInt, Computed: true},
					"ram":             {Type: schema.TypeInt, Computed: true},
					"disk":            {Type: schema.TypeInt, Required: true},
					"flavor":          {Type: schema.TypeString, Computed: true},
					"region":          {Type: schema.TypeString, Required: true},
					"virtualization":  {Type: schema.TypeString, Required: true},
					"os_name":         {Type: schema.TypeString, Required: true},
					"os_version":      {Type: schema.TypeString, Required: true},
					"fault_tolerance": {Type: schema.TypeString, Required: true},
					"state":           {Type: schema.TypeString, Computed: true},
					"state_resize":    {Type: schema.TypeString, Computed: true},
					"zone":            {Type: schema.TypeString, Required: true},
					"ip":              {Type: schema.TypeString, Computed: true},
					"dns":             {Type: schema.TypeString, Computed: true},
					"dns_name":        {Type: schema.TypeString, Computed: true},
					"step":            {Type: schema.TypeString, Computed: true},
					"user":            {Type: schema.TypeString, Computed: true},
					"public_ssh_name": {Type: schema.TypeString, Optional: true},
					"public_ssh":      {Type: schema.TypeString, Optional: true},
				},
			},
		},
		"volume": {
			Type:     schema.TypeList,
			Optional: true,
			// Computed: true,
			Elem: &schema.Resource{
				Schema: map[string]*schema.Schema{
					"tosca_request_id": {Type: schema.TypeString, Computed: true},
					"path":             {Type: schema.TypeString, Optional: true},
					"size":             {Type: schema.TypeInt, Required: true},
					"status":           {Type: schema.TypeString, Computed: true},
					"name":             {Type: schema.TypeString, Optional: true},
					"fs_type":          {Type: schema.TypeString, Optional: true},
					"storage_type":     {Type: schema.TypeString, Optional: true},
				},
			},
		},
		"tag_ids": {Type: schema.TypeSet, Optional: true, Elem: &schema.Schema{Type: schema.TypeString}},
	}

	SchemaELK = map[string]*schema.Schema{
		"name":            {Type: schema.TypeString, Computed: true},
		"service_name":    {Type: schema.TypeString, Required: true},
		"group_id":        {Type: schema.TypeString, Required: true},
		"project_id":      {Type: schema.TypeString, Required: true},
		"cluster_uuid":    {Type: schema.TypeString, Computed: true},
		"ir_group":        {Type: schema.TypeString, Required: true},
		"ir_type":         {Type: schema.TypeString, Computed: true},
		"cpu":             {Type: schema.TypeInt, Computed: true},
		"ram":             {Type: schema.TypeInt, Computed: true},
		"disk":            {Type: schema.TypeInt, Required: true},
		"flavor":          {Type: schema.TypeString, Required: true},
		"region":          {Type: schema.TypeString, Required: true},
		"virtualization":  {Type: schema.TypeString, Required: true},
		"os_name":         {Type: schema.TypeString, Required: true},
		"os_version":      {Type: schema.TypeString, Required: true},
		"fault_tolerance": {Type: schema.TypeString, Required: true},
		"state":           {Type: schema.TypeString, Computed: true},
		"state_resize":    {Type: schema.TypeString, Computed: true},
		"zone":            {Type: schema.TypeString, Required: true},
		"ip":              {Type: schema.TypeString, Computed: true},
		"dns":             {Type: schema.TypeString, Computed: true},
		"dns_name":        {Type: schema.TypeString, Computed: true},
		"step":            {Type: schema.TypeString, Computed: true},
		"public_ssh_name": {Type: schema.TypeString, Optional: true},
		"user":            {Type: schema.TypeString, Computed: true},
		"group":           {Type: schema.TypeString, Optional: true},
		"app_params": {
			Type:     schema.TypeMap,
			Required: true,
			Elem:     &schema.Schema{Type: schema.TypeString, Required: true},
		},
		"volume": {
			Type:     schema.TypeSet,
			Optional: true,
			// Computed: true,
			Elem: &schema.Resource{
				Schema: map[string]*schema.Schema{
					// "id":               {Type: schema.TypeString, Computed: true},
					// "tosca_request_id": {Type: schema.TypeString, Computed: true},
					"path": {Type: schema.TypeString, Optional: true},
					"size": {Type: schema.TypeInt, Required: true},
					// "status":           {Type: schema.TypeString, Computed: true},
					// "name":             {Type: schema.TypeString, Optional: true},
					// "fs_type":          {Type: schema.TypeString, Optional: true},
					// "storage_type":     {Type: schema.TypeString, Optional: true},
					// "path": {
					// 	Type:     schema.TypeString,
					// 	Optional: true,
					// 	DiffSuppressFunc: func(k, old, new string, d *schema.ResourceData) bool {
					//
					// 	},
					// },
				},
			},
		},
		"tag_ids": {Type: schema.TypeSet, Optional: true, Elem: &schema.Schema{Type: schema.TypeString}},
	}

}
